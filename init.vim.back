

""-------------------------------------------------------------------------------------------------------------
""---------------------------------------------common-start----------------------------------------------------
""-------------------------------------------------------------------------------------------------------------

set number
set mouse=c
set tabstop=4
set autoindent
set backspace=indent,eol,start
set hlsearch
set clipboard+=unnamedplus
set foldmethod=syntax
set nofoldenable
"" 自动同步
set autoread
set fillchars=eob:\ 
syntax on

" Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif


" {} completion
function! InsertBrace()
    call feedkeys("\<BS>",'n')
    let l:frontChar = getline('.')[col('.') - 2]
    if l:frontChar == "{" || l:frontChar == "("
        call feedkeys("\<CR>\<ESC>\O", 'n')
    else
        call feedkeys("\<CR>", 'n')
    endif
endfunction
inoremap <expr> <ENTER> InsertBrace()


inoremap { {}<LEFT>
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap ' ''<ESC>i
inoremap " ""<ESC>i

let &t_SI.="\e[5 q"
onoremap ;; <ESC>
inoremap ;; <ESC>
nnoremap ;; <ESC>
vnoremap ;; <ESC>
cnoremap ;; <ESC>
xnoremap ;; <ESC> 


""exit windows
tnoremap ;; <C-\><C-n>
""switch windows
nnoremap <TAB> <C-w>w
nnoremap vv <C-v>

echo expand("%:p:h")

cnoreabbrev fd echo expand("%:p:h")
cnoreabbrev vst vs<ENTER>:term
cnoreabbrev spt sp<ENTER>:term


""-------------------------------------------------------------------------------------------------------------
""-----------------------------------------------common-end----------------------------------------------------
""-------------------------------------------------------------------------------------------------------------












""-------------------------------------------------------------------------------------------------------------
""--------------------------------------------vim-plug-start---------------------------------------------------
""-------------------------------------------------------------------------------------------------------------



call plug#begin('/home/asleep/.local/share/nvim/site/autoload')
Plug 'joshdick/onedark.vim'
Plug 'itchyny/lightline.vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'tpope/vim-fugitive'
Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' }
Plug 'ms-jpq/chadtree', {'branch': 'chad', 'do': 'python3 -m chadtree deps'}
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app && yarn install' }
Plug 'sbdchd/neoformat'
Plug 'sheerun/vim-polyglot'
call plug#end()

"" 有些插件需要安装 nerd fonts！
"" nerd fonts 包括了 powerline fonts！
"" 建议安装 DejaVuSansMonoNerd！

"" 这个是 LeaderF 的设置
let g:Lf_WindowPosition = 'popup'
""command! -nargs=* FF LeaderfFile <args>
cnoreabbrev ff LeaderfFile

cnoreabbrev fm Neoformat
""autocmd BufWritePre * undojoin | Neoformat

cnoreabbrev mt MarkdownPreviewToggle

"" 这个是 chadtree 的设置
"" 明确指定绑定的键之后，就不会使用默认的键
let g:chadtree_settings = {
  \ 'keymap.change_focus_up': [".."],
  \ 'keymap.secondary': ["<2-leftmouse>"]
\}

nnoremap <F2> :CHADopen<CR>


let g:onedark_terminal_italics=1
autocmd ColorScheme * highlight Normal ctermbg=NONE guibg=NONE 
colorscheme onedark

let g:lightline = {
      \'colorscheme' : 'onedark',
      \ 'separator': { 'left': '', 'right': '' },
      \ 'subseparator': { 'left': '', 'right': '' },
      \ 'component': {
            \ 'lineinfo': ' %3l / %L : %-2v',
            \ }, 
      \ }


""-------------------------------------------------------------------------------------------------------------
""-----------------------------------------------vim-plug-end--------------------------------------------------
""-------------------------------------------------------------------------------------------------------------









""-------------------------------------------------------------------------------------------------------------
""------------------------------------------------coc-start----------------------------------------------------
""-------------------------------------------------------------------------------------------------------------

inoremap <silent><expr> <TAB> coc#pum#visible() ? coc#pum#next(1) :"\<Tab>" 

nnoremap gd <Plug>(coc-definition)
nnoremap gt <Plug>(coc-type-definition)
nnoremap gi <Plug>(coc-implementation)
nnoremap gr <Plug>(coc-references)

function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nnoremap <space>r <Plug>(coc-rename)

" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>

" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>

" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>


""-------------------------------------------------------------------------------------------------------------
""-------------------------------------------------coc-end-----------------------------------------------------
""-------------------------------------------------------------------------------------------------------------










""-------------------------------------------------------------------------------------------------------------
""----------------------------------------------netrw_start----------------------------------------------------
""-------------------------------------------------------------------------------------------------------------


""
""let g:netrw_banner = 0
""let g:netrw_liststyle = 3
""let g:netrw_browse_split = 4
""let g:netrw_altv = 1
""let g:netrw_winsize = 15
""
""set autochdir
""
""" Toggle Vexplore with <F2>
""function! ToggleVExplorer()
""    if exists("t:expl_buf_num")
""        let expl_win_num = bufwinnr(t:expl_buf_num)
""        let cur_win_num = winnr()
""
""        if expl_win_num != -1
""            while expl_win_num != cur_win_num
""                exec "wincmd w"
""                let cur_win_num = winnr()
""            endwhile
""
""            close
""        endif
""
""        unlet t:expl_buf_num
""    else
""         Vexplore
""         let t:expl_buf_num = bufnr("%")
""    endif
""endfunction
""
""map <F2> :call ToggleVExplorer()<CR>
""




""hi VertSplit ctermfg=NONE ctermbg=NONE cterm=NONE
""set fillchars=vert:\ 
""""set fillchars=vert:\│
""set statusline=%*\ %.50F\               "显示文件名和文件路径
""set statusline+=%=%y%m%r%h%w\ %*        "显示文件类型及文件状态
""set statusline+=%{&ff}\[%{&fenc}]\ %*   "显示文件编码类型
""set statusline+=%l/%L,%c\ %*            "显示光标所在行和列
""set statusline+=%3p%%                   "显示光标前文本所占总文本的比例
""
""
""hi Statusline ctermfg=NONE ctermbg=NONE cterm=bold 
""hi StatuslineNC ctermfg=NONE ctermbg=NONE cterm=NONE





""-------------------------------------------------------------------------------------------------------------
""-----------------------------------------------netrw-end-----------------------------------------------------
""-------------------------------------------------------------------------------------------------------------




